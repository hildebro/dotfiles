#!/bin/bash

# A script to download a song from Spotify, move it to a web server, and clean up.

# Exit immediately if a command exits with a non-zero status.
set -e

# --- Configuration ---
# Your local development directory for spotdl
SPOTDL_VENV_DIR="$HOME/development/ytdlp-venv"

# The SSH user and hostname of your web server
SSH_TARGET="webserver"

# The base directory on the web server for your music files
REMOTE_MUSIC_DIR="/srv/files/Music"

# --- Main Script ---

# Check if an argument was provided
if [ -z "$1" ]; then
    echo "Usage: $0 <spotify_url_or_query>"
    exit 1
fi

echo "--- Starting download and transfer process ---"

# Check for jq dependency
if ! command -v jq &> /dev/null; then
    echo "Error: 'jq' is not installed. Please install it to continue (e.g., 'sudo pacman -S jq')."
    exit 1
fi

echo "1. Changing to virtual environment directory and activating..."
cd "$SPOTDL_VENV_DIR"
source bin/activate

echo "2. Getting expected track count..."
EXPECTED_COUNT=$(spotdl save "$1" --log-level WARNING --save-file - | jq '.[0].tracks_count')

# Verify that we got a valid number
if ! [[ "$EXPECTED_COUNT" =~ ^[0-9]+$ ]] || [ "$EXPECTED_COUNT" -eq 0 ]; then
    echo "Error: Could not determine a valid track count from the URL. Exiting."
    deactivate
    exit 1
fi
echo "    - Expected song count: $EXPECTED_COUNT"

# Download/Retry Logic
echo "3. Downloading songs..."
spotdl download "$1" --output '{track-number} {artist} {title}' --overwrite skip

# Count how many files were actually downloaded
DOWNLOADED_COUNT=$(ls -1 -- *.mp3 2>/dev/null | wc -l)

if [ "$DOWNLOADED_COUNT" -lt "$EXPECTED_COUNT" ]; then
    echo "Warning: Download was incomplete ($DOWNLOADED_COUNT/$EXPECTED_COUNT). Retrying once..."
    spotdl download "$1" --output '{track-number} {artist} {title}' --overwrite skip
    DOWNLOADED_COUNT=$(ls -1 -- *.mp3 2>/dev/null | wc -l)
fi

# Final check after any potential retry
if [ "$DOWNLOADED_COUNT" -lt "$EXPECTED_COUNT" ]; then
    echo "Error: Download failed again. Found only $DOWNLOADED_COUNT of $EXPECTED_COUNT songs. Exiting."
    deactivate
    exit 1
fi

echo "    - Successfully downloaded $DOWNLOADED_COUNT song(s)."

# --- Script continues as before ---

echo "4. Extracting artist and album metadata..."
# Grab the first mp3 file found in the current directory
MP3_FILE=$(find . -maxdepth 1 -name "*.mp3" -print -quit)

# Use ffprobe to get metadata
# Note: You need ffprobe installed (`pacman -S ffmpeg`)
# We escape single quotes within the sed command to ensure the JSON is correctly parsed.
METADATA_JSON=$(ffprobe -v quiet -print_format json -show_format -show_streams "$MP3_FILE")
ARTIST=$(echo "$METADATA_JSON" | grep -oP '"artist": "\K[^"]*')
ALBUM=$(echo "$METADATA_JSON" | grep -oP '"album": "\K[^"]*')

if [ -z "$ARTIST" ] || [ -z "$ALBUM" ]; then
    echo "Warning: Could not extract artist or album metadata. Exiting."
    deactivate
    exit 1
fi

echo "    - Artist: $ARTIST"
echo "    - Album:  $ALBUM"

echo "5. Checking for remote directory and creating if it doesn't exist..."
# Create the full remote path. We use sed to handle any single quotes in the artist/album names.
REMOTE_DIR="${REMOTE_MUSIC_DIR}/$(echo "$ARTIST" | sed "s/'/\\\'/g")/$(echo "$ALBUM" | sed "s/'/\\\'/g")"
ssh "$SSH_TARGET" "mkdir -p \"$REMOTE_DIR\""

echo "6. Transferring files to $SSH_TARGET:$REMOTE_DIR..."
scp *.mp3 "$SSH_TARGET:$REMOTE_DIR/"

echo "7. Deactivating virtual environment and removing local mp3 files..."
deactivate
rm -v *.mp3

echo "--- Process complete! ---"
